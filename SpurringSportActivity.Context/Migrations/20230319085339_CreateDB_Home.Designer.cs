// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpurringSportActivity.Context;

#nullable disable

namespace SpurringSportActivity.Context.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230319085339_CreateDB_Home")]
    partial class CreateDBHome
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SpurringSportActivity.Repositories.Entities.CompaniesDetails", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("CompanyEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("CompaniesDetails");
                });

            modelBuilder.Entity("SpurringSportActivity.Repositories.Entities.CompanyPoints", b =>
                {
                    b.Property<int>("CompanyPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyPointId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateWon")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PlacingDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WinnerId")
                        .HasColumnType("int");

                    b.HasKey("CompanyPointId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CouponId");

                    b.HasIndex("WinnerId");

                    b.ToTable("CompanyPoints");
                });

            modelBuilder.Entity("SpurringSportActivity.Repositories.Entities.CouponDetails", b =>
                {
                    b.Property<int>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CouponId"));

                    b.Property<string>("Advertisement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CouponDetail")
                        .HasColumnType("int");

                    b.HasKey("CouponId");

                    b.ToTable("CouponDetails");
                });

            modelBuilder.Entity("SpurringSportActivity.Repositories.Entities.PointsDetails", b =>
                {
                    b.Property<int>("PointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PointId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRealized")
                        .HasColumnType("bit");

                    b.Property<float>("PointX")
                        .HasColumnType("real");

                    b.Property<float>("PointY")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserOrCompany")
                        .HasColumnType("int");

                    b.HasKey("PointId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("PointsDetails");
                });

            modelBuilder.Entity("SpurringSportActivity.Repositories.Entities.PublicPoints", b =>
                {
                    b.Property<int>("PublicPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublicPointId"));

                    b.Property<int>("PointId")
                        .HasColumnType("int");

                    b.HasKey("PublicPointId");

                    b.HasIndex("PointId");

                    b.ToTable("PublicPoints");
                });

            modelBuilder.Entity("SpurringSportActivity.Repositories.Entities.SportActivities", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"));

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("CompletionTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<float>("TotalKilometers")
                        .HasColumnType("real");

                    b.Property<int>("TotalSteps")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("SportsActivities");
                });

            modelBuilder.Entity("SpurringSportActivity.Repositories.Entities.UserPoints", b =>
                {
                    b.Property<int>("UserPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPointId"));

                    b.Property<int>("CouponAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateWon")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PlacingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserPointId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPoints");
                });

            modelBuilder.Entity("SpurringSportActivity.Repositories.Entities.UsersDetails", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreditCardValidity")
                        .HasColumnType("datetime2");

                    b.Property<int>("DigitsOnTheBack")
                        .HasColumnType("int");

                    b.Property<int>("UserBank")
                        .HasColumnType("int");

                    b.Property<int>("UserBankAccount")
                        .HasColumnType("int");

                    b.Property<int>("UserBankBranch")
                        .HasColumnType("int");

                    b.Property<string>("UserCreditCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIDNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UsersDetails");
                });

            modelBuilder.Entity("SpurringSportActivity.Repositories.Entities.CompanyPoints", b =>
                {
                    b.HasOne("SpurringSportActivity.Repositories.Entities.CompaniesDetails", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpurringSportActivity.Repositories.Entities.CouponDetails", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpurringSportActivity.Repositories.Entities.UsersDetails", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId");

                    b.Navigation("Company");

                    b.Navigation("Coupon");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("SpurringSportActivity.Repositories.Entities.PointsDetails", b =>
                {
                    b.HasOne("SpurringSportActivity.Repositories.Entities.CompanyPoints", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpurringSportActivity.Repositories.Entities.UserPoints", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SpurringSportActivity.Repositories.Entities.PublicPoints", b =>
                {
                    b.HasOne("SpurringSportActivity.Repositories.Entities.PointsDetails", "Point")
                        .WithMany()
                        .HasForeignKey("PointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Point");
                });

            modelBuilder.Entity("SpurringSportActivity.Repositories.Entities.SportActivities", b =>
                {
                    b.HasOne("SpurringSportActivity.Repositories.Entities.UsersDetails", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SpurringSportActivity.Repositories.Entities.UserPoints", b =>
                {
                    b.HasOne("SpurringSportActivity.Repositories.Entities.UsersDetails", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
